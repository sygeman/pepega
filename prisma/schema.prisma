generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
}

model Token {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Connection {
  id         String   @id @default(cuid())
  instanceId String?
  ipHash     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
}

enum UserRole {
  User
  Admin
  Mod
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  role          UserRole?     @default(User)
  emailVerified DateTime?
  image         String?
  coins         Int           @default(100)
  accounts      Account[]
  sessions      Session[]
  connection    Connection[]
  clipScores    ClipScore[]
  clipComments  ClipComment[]
  clipHistory   ClipHistory[]
  userCoins     UserCoin[]
  Token         Token[]
  Profile       Profile[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id           String  @id @default(cuid())
  provider     String
  serviceId    String
  name         String?
  avatar       String?
  email        String?
  accessToken  String?
  refreshToken String?
  user         User    @relation(fields: [userId], references: [id])
  userId       String
}

model Clip {
  id               String        @id
  broadcaster_id   String
  broadcaster_name String
  creator_id       String
  creator_name     String
  video_id         String
  game_id          String
  language         String
  title            String
  view_count       Int
  created_at       String
  thumbnail_url    String
  duration         Float
  score            Int?          @default(0)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now()) @updatedAt
  scores           ClipScore[]
  comments         ClipComment[]
  hisotry          ClipHistory[]
  userCoins        UserCoin[]
}

enum ClipScoreAction {
  INCREASE
  DECREASE
}

model ClipScore {
  id        String          @id @default(cuid())
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  clip      Clip            @relation(fields: [clipId], references: [id])
  clipId    String
  action    ClipScoreAction
  coins     Int
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now()) @updatedAt
}

model ClipComment {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  clip      Clip     @relation(fields: [clipId], references: [id])
  clipId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ClipHistory {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  clip      Clip     @relation(fields: [clipId], references: [id])
  clipId    String
  count     Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum UserCoinAction {
  INCREASE
  DECREASE
}

model UserCoin {
  id        String         @id @default(cuid())
  user      User           @relation(fields: [userId], references: [id])
  userId    String
  clip      Clip           @relation(fields: [clipId], references: [id])
  clipId    String
  action    UserCoinAction
  coins     Int
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt
}
